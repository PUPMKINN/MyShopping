<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/assetsSignUpToTutor/style.css">
    <!-- <link rel="stylesheet" href="assets\card.css"> -->
    <link rel="stylesheet" href="/texting.css">

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <title>Document</title>
</head>

<body>

    <div class="container">

        <div id="messages"></div>
        <div class="wrapper-input"> <input id="inputMessage" type="text" placeholder="Type a message...">
            <button id="sendButton">Send</button>
        </div>

    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        console.log(`{{roomChat._id}}`)
        const socket = io('http://localhost:10000');
        const messages = document.getElementById('messages');
        const inputMessage = document.getElementById('inputMessage');
        const sendButton = document.getElementById('sendButton');

        document.addEventListener('DOMContentLoaded', () => {
            const oldMessages = "{{roomChat.message}}".split(',');
            oldMessages.forEach(message => {
                const item = document.createElement('li');
                let displayMessage = message;
                if (message.startsWith('tutor:')) {
                    item.classList.add('guest');
                    displayMessage = message.replace('tutor: ', '');
                } else if (message.startsWith('user:')) {
                    item.classList.add('owner');
                    displayMessage = message.replace('user: ', '');
                }
                item.textContent = displayMessage;
                messages.prepend(item);
            });
        });

        // Join a room
        socket.emit('join room', `{{ roomChat._id }}`); // replace 'room1' with the actual room name

        socket.on('connect', () => {
            console.log('Connected to the server');
        });

        // Listen for a 'private message' event from the server
        socket.on('private message', (data) => {
            const item = document.createElement('li');
            if (data.startsWith('tutor:')) {
                item.classList.add('guest');
                 displayMessage = data.replace('tutor: ', '');
            } else if (data.startsWith('user:')) {
                item.classList.add('owner');
                 displayMessage = data.replace('user: ', '');
            }
            item.textContent = displayMessage;
            messages.prepend(item);
           
            window.scrollTo(0, document.body.scrollHeight);
        });

        // Send a message to the server
        const orderId = "{{order._id}}";
        sendButton.addEventListener('click', async () => {
            console.log('click');
            const message = "user: " + inputMessage.value;
            const displayMessage = inputMessage.value;
            const response = await fetch(`/user/texting/${orderId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message }),
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            socket.emit('private message', { room: `{{ roomChat._id }}`, message: message });

            const item = document.createElement('li');
             item.classList.add('owner');
            item.textContent = displayMessage;
            messages.prepend(item);
            window.scrollTo(0, document.body.scrollHeight);

            inputMessage.value = '';
        });

    </script>


    </div>






    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
        integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
        crossorigin="anonymous"></script>
</body>

</html>